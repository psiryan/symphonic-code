/*
 * Copyright (C) 2007, 2008, 2009 Patrick Balleux, Nicolas Cardoso De Castro
 * (nicolas_cardoso@users.sourceforge.net), Daniel Å½alar (danizmax@gmail.com)
 *
 * This file is part of JSymphonic program.
 *
 * JSymphonic is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JSymphonic is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with JSymphonic. If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * JSymphonicMiniPlayer.java
 *
 * Created on 23-Aug-2009, 18:00:13
 */

package org.danizmax.jsymphonic.gui;

import java.io.File;
import java.util.Map;
/*import javazoom.jlgui.basicplayer.BasicController;
import javazoom.jlgui.basicplayer.BasicPlayer;
import javazoom.jlgui.basicplayer.BasicPlayerEvent;
import javazoom.jlgui.basicplayer.BasicPlayerException;
import javazoom.jlgui.basicplayer.BasicPlayerListener;*/

/**
 *
 * @author danizmax
 */
public class JSymphonicMiniPlayer extends javax.swing.JPanel //implements BasicPlayerListener
{
    /** Creates new form JSymphonicMiniPlayer */
    public JSymphonicMiniPlayer() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        playSlider = new javax.swing.JSlider();
        statusLabel = new javax.swing.JLabel();

        playButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/danizmax/jsymphonic/resources/icons/media-playback-start.png"))); // NOI18N
        playButton.setToolTipText("Play");
        playButton.setBorder(null);
        playButton.setFocusable(false);
        playButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/danizmax/jsymphonic/resources/icons/media-playback-stop.png"))); // NOI18N
        stopButton.setToolTipText("Stop");
        stopButton.setBorder(null);
        stopButton.setFocusable(false);
        stopButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        stopButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        playSlider.setPaintLabels(true);

        statusLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusLabel.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playSlider, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(playSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(playButton, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(statusLabel))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton playButton;
    private javax.swing.JSlider playSlider;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables

/*public void play(String filename)
{
    // Instantiate BasicPlayer.
    BasicPlayer player = new BasicPlayer();
    System.out.print(player.getLineCurrentBufferSize());
    // BasicPlayer is a BasicController.
    BasicController control = (BasicController) player;
    // Register BasicPlayerTest to BasicPlayerListener events.
    // It means that this object will be notified on BasicPlayer
    // events such as : opened(...), progress(...), stateUpdated(...)
    player.addBasicPlayerListener(this);

    try { // Open file, or URL or Stream (shoutcast, icecast) to play.
    control.open(new File(filename));

    // control.open(new URL("http://yourshoutcastserver.com:8000"));
    // Start playback in a thread. control.play();
    // If you want to pause/resume/pause the played file then
    // write a Swing player and just call control.pause(),
    // control.resume() or control.stop().
    // Use control.seek(bytesToSkip) to seek file
    // (i.e. fast forward and rewind). seek feature will
    // work only if underlying JavaSound SPI implements
    // skip(...). True for MP3SPI and SUN SPI's
    // (WAVE, AU, AIFF). // Set Volume (0 to 1.0). control.setGain(0.85);
    // Set Pan (-1.0 to 1.0).
    control.setPan(0.0);
    control.play();
    } catch (BasicPlayerException e) { e.printStackTrace(); }
}*/
    /**
* Open callback, stream is ready to play.
*
* properties map includes audio format dependant features such as
* bitrate, duration, frequency, channels, number of frames, vbr flag, ...
*
* @param stream could be File, URL or InputStream
* @param properties audio stream properties.
*/
/*public void opened(Object stream, Map properties)
{
// Pay attention to properties. It's useful to get duration,
// bitrate, channels, even tag such as ID3v2.
display("opened : "+properties.toString());
}*/
/** * Progress callback while playing.
*
* This method is called severals time per seconds while playing.
* properties map includes audio format features such as
* instant bitrate, microseconds position, current frame number, ...
*
* @param bytesread from encoded stream.
* @param microseconds elapsed (<b>reseted after a seek !</b>).
* @param pcmdata PCM samples.
* @param properties audio stream parameters.
*/
/*public void progress(int bytesread, long microseconds, byte[] pcmdata, Map properties)
{
// Pay attention to properties. It depends on underlying JavaSound SPI
// MP3SPI provides mp3.equalizer.
display("progress : "+properties.toString());
}*/
/**
* Notification callback for basicplayer events such as opened, eom ...
*
* @param event
*/
/*public void stateUpdated(BasicPlayerEvent event)
{
// Notification of BasicPlayer states (opened, playing, end of media, ...)
display("stateUpdated : "+event.toString());
}*/
  /**
   * A handle to the BasicPlayer, plugins may control the player through
   * the controller (play, stop, ...)
   * @param controller : a handle to the player
   */
 /* public void setController(BasicController controller)
  {
    display("setController : "+controller);
  }

  public void display(String msg)
  {
    statusLabel.setText(msg);
  }*/


}
